const { User } = require('../../db/models');
const bcrypt = require('bcrypt'); 
const path = require('path')
const fs = require('fs')

module.exports = {
  getAllUsers: async (req, res) => {
    try {
      const users = await User.findAll();
      res.json(users); //! –£—Ç–µ—á–∫–∞ –ø–∞—Ä–æ–ª–µ–π
    } catch (err) {
      res.status(400).json({ err: err.message });
    }
  },

  getOneUser: async (req, res) => {
    try {
        const { login } = req.body;
        const user = await User.findOne({ where: { login } });
        res.json(user); //! –£—Ç–µ—á–∫–∞ –ø–∞—Ä–æ–ª—è
    } catch (err) {
      res.status(400).json({ err: err.message });
    }
  },
  getOneUserNotPassword: async (req, res) => {
    try {
      const { login } = req.session;
      if(!login){
        return res.status(200).json({ message: 'User not found' })
      }
      const user = await User.findOne({ where: { login } });
      
      if (user) {
        // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ password –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—Ä—É—á–Ω—É—é
        const { password, ...userWithoutPassword } = user.toJSON();
        res.json(userWithoutPassword);
      } else {
        res.status(200).json({ message: 'User not found' });
      }
    } catch (err) {
      console.log("üöÄ ~ getOneUserNotPassword: ~ err:", err)
      
      res.status(400).json({ err: err.message });
    }
  },
  createUser: async (req, res) => { //! –î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
    const { login, email, password, full_name, role, bio } = req.body;
    console.log( req.body);
    const profile_picture = req.file ? path.join(__dirname, '../../../client/src/assets/avatars/',req.file.filename) : 'src/assets/avatars/ava.png';
    console.log("üöÄ ~ createUser: ~ profile_picture:", profile_picture)

    try {
      console.log(login, email, password, full_name, role, bio );
      const userInDb = await User.findOne({ where: { login } });

      if(!userInDb){
        const hash = await bcrypt.hash(password, 10);

        const UserData = { 
            login, 
            email, 
            password:hash, 
            full_name, 
            role,   
            ...(bio && { bio }),
            profile_picture
        }

        
      const user = await User.create(UserData);

      console.log("üöÄ ~ createUser: ~ req.session:", req.session)
      console.log("üöÄ ~ createUser: ~ req.session.role :", req.session.role )
      req.session.login = user.login; // –∏–ª–∏ EMAIL –∏–ª–∏ MAIL
      req.session.role = user.role
      req.session.save((err) => {
        if(err)
        console.log('err saving', err);

          res.status(200).json({ message: `Registration succes ${login}`, login: user.login, src:profile_picture }); // –¥–ª—è fetch-a
          // res.redirect('/');

        });
        console.log("üöÄ ~ CREATED: ~ req.session:", req.session)
        console.log("üöÄ ~ CREATED: ~ req.session.role :", req.session.role )

      }else{
      res.status(200).json(null); 
      }

    } catch (err) {
    console.log("üöÄ ~ createUser: ~ err:", err)
    
      res.status(400).json({ err: err.message });
    }
  },

//   checkSession: async (req, res) => { //? –ú–æ–∂–µ—Ç –±—ã—Ç—å, –Ω–µ –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
//     try {
//         const { login } = req.body;
//         const user = await User.findOne({ where: { login } });
//         res.json(user);
//     } catch (err) {
//       res.status(400).json({ err: err.message });
//     }
//   },

  loginUser: async (req, res) => { //? –ú–æ–∂–µ—Ç –±—ã—Ç—å, –Ω–µ –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

    const { login, password } = req.body;

    try {
        const userInDb = await User.findOne({ where: { login } });
        if(userInDb){
         const checkPass = await bcrypt.compare(password, userInDb.password);
         if (checkPass) {
            req.session.login = userInDb.login;
            req.session.role = userInDb.role;
            req.session.save(() => {
              console.log('Password correct. Session saved');
            });
          return  res.json({ message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!`, src:userInDb.profile_picture}) 
          }else{
            return   res.json({ message: `–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ`, err:'err password'}) 
          } 
        }else{
          return  res.json({ message: `–¢–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`, err:'err login'}) 
        }
    } catch (err) {
      res.status(400).json({ err: err.message });
    }
  },

  destroyUser: async (req, res) => {
    try {
      req.session.destroy((err) => {
        if (err) {
          res.status(400).json({ err: err.message });
        } else {
          res.clearCookie('LogTrip');
          res.status(200).json(null);
        }
      });
    } catch (err) {
      res.status(400).json({ err: err.message });
    }
  },
  checkSession: async (req, res) => { //? –ú–æ–∂–µ—Ç –±—ã—Ç—å, –Ω–µ –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    try {
        console.log("üöÄ ~ checkSession: ~ req.session:", req.session)
        console.log("üöÄ ~ checkSession: ~ req.session.role :", req.session.role )
        if(req.session.login){   
          const {login}= req.session
          const user = await User.findOne({ where: { login } });
          res.json({login:req.session.login, role:req.session.role, src:user.profile_picture})
        }
        else res.json(null)
    } catch (err) {
      console.log("üöÄ ~ checkSession: ~ err:", err)
      res.status(400).json({ err: err.message });
    }
  },
  updateUser: async (req, res) => {
    const { login } = req.session;
    const { full_name, bio } = req.body;
    let profile_picture = null

    if( !login )  
        return res.status(404).json({ message: 'User not found' });

    try {
      const user = await User.findOne({ where: { login } });
  
      if (!user) {
        console.log('User not found');
        return res.status(404).json({ message: 'User not found' });
      }
  
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
      if (req.file) {
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (user.profile_picture && user.profile_picture !== 'src/assets/avatars/ava.png') {
          const oldImagePath = path.join(__dirname, '../../../client/src/assets/avatars/', path.basename(user.profile_picture));
          if (fs.existsSync(oldImagePath)) {
            fs.unlinkSync(oldImagePath);
          }
        }
  
        profile_picture =`/src/assets/avatars/${req.file.filename}`
      }
  
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updatedUserData = {
        full_name: full_name || user.full_name,
        bio: bio || user.bio,
        ...(profile_picture && { profile_picture }),
      };
  
      await user.update(updatedUserData);
  
      res.status(200).json({ message: 'User updated successfully', user }); //! –£—Ç–µ—á–∫–∞ –ø–∞—Ä–æ–ª—è
    } catch (err) {
      console.log("üöÄ ~ updateUser: ~ err:", err)      
      res.status(400).json({ err: err.message });
    }
  },



};
